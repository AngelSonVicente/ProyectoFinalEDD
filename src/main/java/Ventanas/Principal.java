/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Ventanas;

import ArbolB.ArbolB;
import Grafo.GenerarGrafica;
import Grafo.Grafo;
import Model.Camino;
import Model.Dato;
import Model.Nodo;
import Util.Util;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;

import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author angel
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
        Reloj relojHilo;
        
    public Principal() {
            
        initComponents();
        
        Hora.removeAllItems();
        Hora.addItem("Seleccione una hora");
        for (int i = 1; i <=24 ; i++) {
            Hora.addItem(String.valueOf(i));
            
        }
        relojHilo = new Reloj(reloj);
    
        relojHilo.start();
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        popupMenu1 = new java.awt.PopupMenu();
        popupMenu2 = new java.awt.PopupMenu();
        popupMenu3 = new java.awt.PopupMenu();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jPopupMenu3 = new javax.swing.JPopupMenu();
        jPopupMenu4 = new javax.swing.JPopupMenu();
        graficaMapa = new javax.swing.JLabel();
        inicio = new javax.swing.JComboBox<>();
        fin = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        funcionalidad = new javax.swing.JComboBox<>();
        tipoMovilidad = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultadoCamino = new javax.swing.JTextPane();
        siguientePaso = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        comenzarViaje = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        reloj = new javax.swing.JTextPane();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        Hora = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        Importar = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        popupMenu1.setLabel("popupMenu1");

        popupMenu2.setLabel("popupMenu2");

        popupMenu3.setLabel("popupMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nodo Incial");

        jLabel2.setText("Nodo Destino");

        funcionalidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                funcionalidadActionPerformed(evt);
            }
        });

        tipoMovilidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tipo de Movilidad", "Vehiculo", "a pie" }));
        tipoMovilidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoMovilidadActionPerformed(evt);
            }
        });

        resultadoCamino.setEditable(false);
        resultadoCamino.setFont(new java.awt.Font("Liberation Sans", 0, 20)); // NOI18N
        jScrollPane1.setViewportView(resultadoCamino);

        siguientePaso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguientePasoActionPerformed(evt);
            }
        });

        jButton2.setText("siguiente Paso");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        comenzarViaje.setText("Comnezar Viaje");
        comenzarViaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comenzarViajeActionPerformed(evt);
            }
        });

        jButton3.setText("Nueo Viaje");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton1.setText("Arbol");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        reloj.setEditable(false);
        reloj.setFont(new java.awt.Font("Liberation Sans", 0, 21)); // NOI18N
        jScrollPane2.setViewportView(reloj);

        jButton4.setText("Parar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Play");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        Hora.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Hora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HoraActionPerformed(evt);
            }
        });

        jMenu3.setText("File");

        Importar.setText("Importar Rutas ");
        Importar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportarActionPerformed(evt);
            }
        });
        jMenu3.add(Importar);

        jMenuItem3.setText("Importar Trafico");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tipoMovilidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(siguientePaso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(comenzarViaje)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(funcionalidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(inicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel1))
                                            .addGap(139, 139, 139))
                                        .addComponent(fin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jButton1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(85, 85, 85)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(graficaMapa, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addGap(39, 39, 39)
                        .addComponent(jButton5)
                        .addGap(59, 59, 59)
                        .addComponent(Hora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton4)
                        .addComponent(jButton5)
                        .addComponent(Hora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(tipoMovilidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(funcionalidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(comenzarViaje))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(siguientePaso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2))
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(0, 47, Short.MAX_VALUE))
                    .addComponent(graficaMapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void ImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportarActionPerformed
        JFrame ventana = new JFrame("Selector de Archivos");

        JFileChooser selectorDeArchivos = new JFileChooser();
        selectorDeArchivos.setFileFilter(new FileNameExtensionFilter("Archivos de texto", "txt"));

        int resultado = selectorDeArchivos.showOpenDialog(ventana);

        if (resultado == JFileChooser.APPROVE_OPTION) {
            try {
                String rutaArchivo = selectorDeArchivos.getSelectedFile().getAbsolutePath();
                mostrarContenidoArchivo(rutaArchivo);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }


    }//GEN-LAST:event_ImportarActionPerformed

    private Util util = new Util();
    private boolean mostrarArbol = false;

    private void tipoMovilidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoMovilidadActionPerformed

        funcionalidad.removeAllItems();
        if (tipoMovilidad.getSelectedIndex() == 1) {

            funcionalidad.addItem("Seleccione la funcionalidad");
            funcionalidad.addItem("Mejor ruta en base a la gasolina");
            funcionalidad.addItem("Mejor ruta en base a la distancia");
            funcionalidad.addItem("Mejor ruta en base a la gasolina y la distancia");
            funcionalidad.addItem("Ruta más rápida en base a la distancia, tiempo y probabilidad de tráfico");

        }

        if (tipoMovilidad.getSelectedIndex() == 2) {

            funcionalidad.addItem("Seleccione la funcionalidad");
            funcionalidad.addItem("Mejor ruta en base al desgaste físico");
            funcionalidad.addItem("Mejor ruta en base al desgaste físico y la distancia");
            funcionalidad.addItem("Mejor ruta en base a la distancia");
            funcionalidad.addItem("Ruta mas rapida en base al distancia y tiempo");

        }


    }//GEN-LAST:event_tipoMovilidadActionPerformed

    Camino recorrido = new Camino();

    private void funcionalidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_funcionalidadActionPerformed

        
        Nodo nodoIncioSeleccionado = (Nodo) inicio.getSelectedItem();

        Nodo nodoFinSeleccionado = (Nodo) fin.getSelectedItem();

        mostrarCamino(nodoIncioSeleccionado, nodoFinSeleccionado);

        mostrarArbol = true;


    }//GEN-LAST:event_funcionalidadActionPerformed

    public String generarMensajeRecorrido(List<Nodo> nodos) {

        String resultado = "";

        for (Nodo nodo : nodos) {

            resultado += nodo.getNombre() + "->";
        }

        resultado = resultado.substring(0, resultado.length() - 2);

        return resultado;
    }

    List<Camino> caminosEncontrados = new ArrayList<>();

    public void mostrarCamino(Nodo nodoIncioSeleccionado, Nodo nodoFinSeleccionado) {

        String resultado = "";
        //   System.out.println("\n\n DE: " + nodoIncioSeleccionado.toString() + " A " + nodoFinSeleccionado.toString());

      
        if (tipoMovilidad.getSelectedIndex() == 1) {
            caminosEncontrados = mapa.encontrarCaminos(nodoIncioSeleccionado, nodoFinSeleccionado, hora);
            //JALAR LA HORA DEL RELOJ
            System.out.println("\n\nCAMINOS VEHICULO");
            System.out.println("---------------------------------------------------------\n");

            System.out.println(caminosEncontrados.toString());

            if (funcionalidad.getSelectedIndex() == 1) {

                System.out.println("Mejor rita en base a la gas");

                resultado = "Mejor Ruta: \n";

                Camino mejorCamino = util.getMejorCaminoGasolina(caminosEncontrados);
                recorrido = mejorCamino;

                System.out.println(grafica.generarDOTRecorrido(mapa.getNodos(), mapa.getAristas(), mejorCamino.getNodos(), nodoIncioSeleccionado, nodoFinSeleccionado, mapa.getNodos().get(6)));

                resultado += " Recorrido: \n" + generarMensajeRecorrido(mejorCamino.getNodos());

                resultado += "\nGasolina Total: " + mejorCamino.getGasolinaTotal();

                resultado += "\n\n Peor Ruta: ";

                Camino peorCamino = util.getPeorCaminoGasolina(caminosEncontrados);

                resultado += " \nRecorrido: ";
                for (Nodo nodo : peorCamino.getNodos()) {

                    resultado += nodo.getNombre() + "->";
                }

                resultado = resultado.substring(0, resultado.length() - 2);

                resultado += "\nGasolina Total: " + peorCamino.getGasolinaTotal();

                resultado += "\nTiempo Total: " + peorCamino.getTiempoTotalVehiculo();
                resultado += "\nrapidez Total: " + peorCamino.getRapidezTotal();
            }
            if (funcionalidad.getSelectedIndex() == 2) {

                System.out.println("Mejor rita en base a la Distancia");

                resultado = "Mejor Ruta: \n";

                Camino mejorCamino = util.getMejorCaminoDistancia(caminosEncontrados);
                recorrido = mejorCamino;

                resultado += " Recorrido: ";
                for (Nodo nodo : mejorCamino.getNodos()) {

                    resultado += nodo.getNombre() + "->";
                }

                resultado = resultado.substring(0, resultado.length() - 2);

                resultado += "\nDistancia Total: " + mejorCamino.getDistanciaTotal();

                resultado += "\n\n Peor Ruta: ";

                Camino peorCamino = util.getPeorCaminoDistancia(caminosEncontrados);

                resultado += " \nRecorrido: ";
                for (Nodo nodo : peorCamino.getNodos()) {

                    resultado += nodo.getNombre() + "->";
                }

                resultado = resultado.substring(0, resultado.length() - 2);

                resultado += "\nDistancia Total: " + peorCamino.getDistanciaTotal();

            }
            if (funcionalidad.getSelectedIndex() == 3) {
                System.out.println("Mejor rita en base a la gas y distancia");

                resultado = "Mejor Ruta: \n";

                Camino mejorCamino = util.getMejorCaminoGasolinaDistancia(caminosEncontrados);
                recorrido = mejorCamino;

                resultado += " Recorrido: ";
                for (Nodo nodo : mejorCamino.getNodos()) {

                    resultado += nodo.getNombre() + "->";
                }

                resultado = resultado.substring(0, resultado.length() - 2);

                resultado += "\nPromedio Gasolina y Distancia  Total: " + mejorCamino.getPromDistanciaGasolina();

                resultado += "\n\n Peor Ruta: ";

                Camino peorCamino = util.getPeorCaminoGasolinaDistancia(caminosEncontrados);

                resultado += " \nRecorrido: ";
                for (Nodo nodo : peorCamino.getNodos()) {

                    resultado += nodo.getNombre() + "->";
                }

                resultado = resultado.substring(0, resultado.length() - 2);

                resultado += "\nPromedio Gasolina Y Distancia Total: " + peorCamino.getPromDistanciaGasolina();

            }

            if (funcionalidad.getSelectedIndex() == 4) {
                System.out.println("Ruta mas rapido  en base a la distancia tiempo y trafico");

                resultado = "Mejor Ruta: \n";

                Camino mejorCamino = util.getMejorCaminoRapidez(caminosEncontrados);
                recorrido = mejorCamino;

                resultado += " Recorrido: ";
                for (Nodo nodo : mejorCamino.getNodos()) {

                    resultado += nodo.getNombre() + "->";
                }

                resultado = resultado.substring(0, resultado.length() - 2);

                resultado += "\nPromedio Rapidez: " + mejorCamino.getRapidezTotal();
                resultado += "\nTitempo de llegada: " + mejorCamino.getTiempoTotalVehiculo() + " minutos";

                resultado += "\n\n Peor Ruta: ";

                Camino peorCamino = util.getPeorCaminoRapidez(caminosEncontrados);

                resultado += " \nRecorrido: ";
                for (Nodo nodo : peorCamino.getNodos()) {

                    resultado += nodo.getNombre() + "->";
                }

                resultado = resultado.substring(0, resultado.length() - 2);

                resultado += "\nPromedio rapidez: " + peorCamino.getRapidezTotal();
                resultado += "\nTitempo de llegada: " + peorCamino.getTiempoTotalVehiculo() + " minutos";

            }

        }

        if (tipoMovilidad.getSelectedIndex() == 2) {

            caminosEncontrados = mapa.encontrarCaminosAPie(nodoIncioSeleccionado, nodoFinSeleccionado);

            System.out.println("\n\nCAMINOS A PATA");
            System.out.println("---------------------------------------------------------\n");

            System.out.println(caminosEncontrados.toString());

            //         System.out.println( grafica.generarDOTRecorridoAPie(mapa.getNodos(), mapa.getAristas(), caminosEncontrados.get(2).getAristas(), nodoIncioSeleccionado, nodoFinSeleccionado, nodoIncioSeleccionado));
            if (funcionalidad.getSelectedIndex() == 1) {

                resultado = "Mejor Ruta: \n";

                Camino mejorCamino = util.getMejorDesgasteFisico(caminosEncontrados);
                recorrido = mejorCamino;

                resultado += " Recorrido: \n" + generarMensajeRecorrido(mejorCamino.getNodos());

                resultado += "\n Desgaste Fisico: " + mejorCamino.getDesgasteFisico();

                resultado += "\n\n Peor Ruta: ";

                Camino peorCamino = util.getPeorDesgasteFisico(caminosEncontrados);

                resultado += " \nRecorrido: \n " + generarMensajeRecorrido(peorCamino.getNodos());

                resultado += "\nDesgaste Fisico: " + peorCamino.getDesgasteFisico();

            }
            if (funcionalidad.getSelectedIndex() == 2) {

                resultado = "Mejor Ruta: \n";

                Camino mejorCamino = util.getMejorCaminoDistanciaDesgaste(caminosEncontrados);
                recorrido = mejorCamino;

                resultado += " Recorrido: \n" + generarMensajeRecorrido(mejorCamino.getNodos());

                resultado += "\n Distancia/Desgaste: " + mejorCamino.getPromDistanciaDesgaste();

                resultado += "\n\n Peor Ruta: ";

                Camino peorCamino = util.getPeorCaminoDistanciaDesgaste(caminosEncontrados);

                resultado += " \nRecorrido: \n " + generarMensajeRecorrido(peorCamino.getNodos());

                resultado += "\nDistancia/Desgaste: " + peorCamino.getPromDistanciaDesgaste();

            }
            if (funcionalidad.getSelectedIndex() == 3) {

                resultado = "Mejor Ruta: \n";

                Camino mejorCamino = util.getMejorCaminoDistancia(caminosEncontrados);
                recorrido = mejorCamino;

                resultado += " Recorrido: \n" + generarMensajeRecorrido(mejorCamino.getNodos());

                resultado += "\n Distancia Total: " + mejorCamino.getDistanciaTotal();

                resultado += "\n\n Peor Ruta: ";

                Camino peorCamino = util.getPeorCaminoDistancia(caminosEncontrados);

                resultado += " \nRecorrido: \n " + generarMensajeRecorrido(peorCamino.getNodos());

                resultado += "\nDistancia Total: " + peorCamino.getDistanciaTotal();

            }

            if (funcionalidad.getSelectedIndex() == 4) {

                resultado = "Mejor Ruta: \n";

                Camino mejorCamino = util.getMejorCaminoRapidezPie(caminosEncontrados);
                recorrido = mejorCamino;

                resultado += " Recorrido: \n" + generarMensajeRecorrido(mejorCamino.getNodos());

                resultado += "\nPromedio rapidez: " + mejorCamino.getRapidezTotal();
                resultado += "\nTitempo de llegada: " + mejorCamino.getTiemporTotalPie() + " minutos";

                resultado += "\n\n Peor Ruta: ";

                Camino peorCamino = util.getPeorCaminoRapidezPie(caminosEncontrados);

                resultado += " \nRecorrido: \n " + generarMensajeRecorrido(peorCamino.getNodos());

                resultado += "\nDistancia Total: " + peorCamino.getDistanciaTotal();

                resultado += "\nPromedio rapidez: " + peorCamino.getRapidezTotal();
                resultado += "\nTitempo de llegada: " + peorCamino.getTiemporTotalPie() + " minutos";

            }

        }

        resultadoCamino.setText(resultado);

    }


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        Nodo nodoIncioSeleccionado = (Nodo) siguientePaso.getSelectedItem();
        Nodo nodoFinSeleccionado = (Nodo) fin.getSelectedItem();

        mostrarCamino(nodoIncioSeleccionado, nodoFinSeleccionado);

//            System.out.println(grafica.generarDOTRecorrido(mapa.getNodos(), mapa.getAristas(), recorrido.getNodos(), (Nodo) inicio.getSelectedItem(), (Nodo) fin.getSelectedItem(), (Nodo) siguientePaso.getSelectedItem()));
        Nodo nodoActual = (Nodo) siguientePaso.getSelectedItem();

        if (nodoIncioSeleccionado != fin.getSelectedItem()) {

            if (tipoMovilidad.getSelectedIndex() == 1) {

                List<Nodo> vecinos = util.getNodosVecinos(mapa.getAristas(), (Nodo) siguientePaso.getSelectedItem());

                DefaultComboBoxModel<Nodo> comboBoxModel = new DefaultComboBoxModel<>();

                comboBoxModel.addAll(vecinos);

                siguientePaso.setModel(comboBoxModel);

         

            }

            if (tipoMovilidad.getSelectedIndex() == 2) {

                List<Nodo> vecinos = util.getTodosNodosVecinos(mapa.getAristas(), (Nodo) siguientePaso.getSelectedItem());

                DefaultComboBoxModel<Nodo> comboBoxModel = new DefaultComboBoxModel<>();

                comboBoxModel.addAll(vecinos);

                siguientePaso.setModel(comboBoxModel);

                File imagen = new File(grafica.graficarCaminoAPie(mapa.getNodos(), mapa.getAristas(), recorrido.getAristas(), (Nodo) inicio.getSelectedItem(), (Nodo) fin.getSelectedItem(), nodoActual));

           
                

            }
            
                   File imagen = new File(grafica.graficarCaminoAPie(mapa.getNodos(), mapa.getAristas(), recorrido.getAristas(), (Nodo) inicio.getSelectedItem(), (Nodo) fin.getSelectedItem(), nodoActual));

                if (imagen.exists() && imagen.isFile()) {
                    try {

                        Desktop.getDesktop().open(imagen);
                    } catch (IOException e) {

                        e.printStackTrace();
                    }
                }

        } else {

            tipoMovilidad.setSelectedIndex(0);
            resultadoCamino.setText("FELICIDADES HA LLEGADO A SU DESTINO!");

            inicio.setEnabled(true);
            fin.setEnabled(true);
            tipoMovilidad.setEnabled(true);
            funcionalidad.setEnabled(true);
            comenzarViaje.setEnabled(true);

        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private float hora=0;

    private void comenzarViajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comenzarViajeActionPerformed
        //cargar los pasos siguientes

         System.out.println("Hora:  "+ relojHilo.getHoraActual());
       
        hora=relojHilo.getHoraActual();
        
        if (tipoMovilidad.getSelectedIndex() == 0 || funcionalidad.getSelectedIndex() == 0) {

            resultadoCamino.setText("No ha elegido el tipo de movilidad o la funcionalidad! \n PORFAVOR SELECCIONELO!");

        } else {

            if (tipoMovilidad.getSelectedIndex() == 1) {
                List<Nodo> vecinos = util.getNodosVecinos(mapa.getAristas(), (Nodo) inicio.getSelectedItem());

                DefaultComboBoxModel<Nodo> comboBoxModel = new DefaultComboBoxModel<>();

                comboBoxModel.addAll(vecinos);

                siguientePaso.setModel(comboBoxModel);

                // Cargar la imagen desde el archivo
                
                File imagen = new File(grafica.graficarCaminoAPie(mapa.getNodos(), mapa.getAristas(), recorrido.getAristas(), (Nodo) inicio.getSelectedItem(), (Nodo) fin.getSelectedItem(), (Nodo) inicio.getSelectedItem()));

                if (imagen.exists() && imagen.isFile()) {
                    try {

                        Desktop.getDesktop().open(imagen);
                    } catch (IOException e) {
                    }
                }
            }

            if (tipoMovilidad.getSelectedIndex() == 2) {

                List<Nodo> vecinos = util.getTodosNodosVecinos(mapa.getAristas(), (Nodo) inicio.getSelectedItem());

                DefaultComboBoxModel<Nodo> comboBoxModel = new DefaultComboBoxModel<>();

                comboBoxModel.addAll(vecinos);

                siguientePaso.setModel(comboBoxModel);

          
                

            }
                  File imagen = new File(grafica.graficarCaminoAPie(mapa.getNodos(), mapa.getAristas(), recorrido.getAristas(), (Nodo) inicio.getSelectedItem(), (Nodo) fin.getSelectedItem(), (Nodo) inicio.getSelectedItem()));

                if (imagen.exists() && imagen.isFile()) {
                    try {

                        Desktop.getDesktop().open(imagen);
                    } catch (IOException e) {
                    }
                }
            

            inicio.setEnabled(false);
            fin.setEnabled(false);
            tipoMovilidad.setEnabled(false);
            funcionalidad.setEnabled(false);
            comenzarViaje.setEnabled(false);

        }

    }//GEN-LAST:event_comenzarViajeActionPerformed

    private void siguientePasoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguientePasoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_siguientePasoActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        tipoMovilidad.setSelectedIndex(0);

        tipoMovilidad.setEnabled(true);
        funcionalidad.setEnabled(true);
        inicio.setEnabled(true);
        fin.setEnabled(true);
        comenzarViaje.setEnabled(true);


    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed

        System.out.println(mapa.toString());
        JFrame ventana = new JFrame("Selector de Archivos");

        JFileChooser selectorDeArchivos = new JFileChooser();
        selectorDeArchivos.setFileFilter(new FileNameExtensionFilter("Archivos de texto", "txt"));

        int resultado = selectorDeArchivos.showOpenDialog(ventana);

        if (resultado == JFileChooser.APPROVE_OPTION) {
            try {
                String rutaArchivo = selectorDeArchivos.getSelectedFile().getAbsolutePath();
                getDatosTrafico(rutaArchivo);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

        System.out.println("---------------------------------------------------------------------");
        System.out.println(mapa.toString());


    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (mostrarArbol){
            
            
            
            ArbolB arbol = new ArbolB(3);
            
            
            int c=0;
            for(Camino camino : caminosEncontrados){
                
               Dato dato = new Dato(c, camino.getNodos().toString());
                
                arbol.insertar(dato);
                
                c++;
                
            
            }
            
            
        System.out.println("\n\n\n"+arbol.generarDOT());
        
        
        
            File imagen = new File(grafica.generarGrafico(arbol.generarDOT(), "Arbol")+"/Arbol.png");

                if (imagen.exists() && imagen.isFile()) {
                    try {

                        Desktop.getDesktop().open(imagen);
                    } catch (IOException e) {

                        e.printStackTrace();
                    }
                }
        
        
        ;
        
        
        
            System.out.println("\n\n Cantidad datos"+ c);
        }
        
        
        
        
        
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
        relojHilo.pararReloj();
        
        
        
        
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        
        relojHilo.seguirReloj();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void HoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HoraActionPerformed
        
        if(Hora.getSelectedIndex()>0){
        
            
        relojHilo.setearHoraInicial(Hora.getSelectedIndex());
        }
        
        
      
        
        
    }//GEN-LAST:event_HoraActionPerformed

    Grafo mapa = new Grafo();
    GenerarGrafica grafica = new GenerarGrafica();

    private void getDatosTrafico(String rutaArchivo) {

        try (BufferedReader br = new BufferedReader(new FileReader(rutaArchivo))) {
            String linea;
            String datos = "";

            while ((linea = br.readLine()) != null) {
                datos += linea + "\n";
                System.out.println(linea);

            }

            mapa.actualizarDatosTrafico(datos);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void mostrarContenidoArchivo(String rutaArchivo) {

        mapa.borrarDatos();

        try (BufferedReader br = new BufferedReader(new FileReader(rutaArchivo))) {
            String linea;
            String datos = "";

            while ((linea = br.readLine()) != null) {
                datos += linea + "\n";
                System.out.println(linea);

            }

            mapa.cargarDatos(datos);

            System.out.println(mapa.toString());

            System.out.println("\n-------------------------------------------------------------------------------------\n");

            System.out.println("Grafica: ");

            String Path = grafica.graficar(mapa.getNodos(), mapa.getAristas());

            System.out.println(Path);
            ImageIcon imageIcon = new ImageIcon(Path); // Reemplaza con la ruta de tu imagen
            graficaMapa.setIcon(imageIcon);

            System.out.println(grafica.generarDOT(mapa.getNodos(), mapa.getAristas()));

            for (Nodo nodo : mapa.getNodos()) {
                inicio.addItem(nodo);
                fin.addItem(nodo);

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Hora;
    private javax.swing.JMenuItem Importar;
    private javax.swing.JButton comenzarViaje;
    private javax.swing.JComboBox<Nodo> fin;
    private javax.swing.JComboBox<String> funcionalidad;
    private javax.swing.JLabel graficaMapa;
    private javax.swing.JComboBox<Nodo> inicio;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JPopupMenu jPopupMenu3;
    private javax.swing.JPopupMenu jPopupMenu4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.PopupMenu popupMenu1;
    private java.awt.PopupMenu popupMenu2;
    private java.awt.PopupMenu popupMenu3;
    private javax.swing.JTextPane reloj;
    private javax.swing.JTextPane resultadoCamino;
    private javax.swing.JComboBox<Nodo> siguientePaso;
    private javax.swing.JComboBox<String> tipoMovilidad;
    // End of variables declaration//GEN-END:variables
}
